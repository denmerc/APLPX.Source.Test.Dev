using System;
using System.Collections.Generic;

using DTO = APLPX.Client.Entity;
using Display = APLPX.UI.WPF.DisplayEntities;

namespace APLPX.UI.WPF.Mappers
{
    /// <summary>
    /// Extension methods for mapping Mode display and client entities.
    /// </summary>
    public static class ModeMapper
    {
        public static Display.DriverMode ToDisplayEntity(this DTO.AnalyticDriverMode dto)
        {
            var displayEntity = new Display.DriverMode();

            displayEntity.Key = dto.Key;
            displayEntity.Name = dto.Name;
            displayEntity.Sort = dto.Sort;
            displayEntity.IsSelected = dto.IsSelected;

            if (dto.Groups != null)
            {
                foreach (DTO.AnalyticDriverGroup group in dto.Groups)
                {
                    displayEntity.Groups.Add(group.ToDisplayEntity());
                }
            }

            return displayEntity;
        }

        public static DTO.AnalyticDriverMode ToDto(this Display.DriverMode displayEntity)
        {
            var groups = new List<DTO.AnalyticDriverGroup>();

            if (displayEntity.IsAutoGenerated)
            {
                //For auto generated drivers, use a single driver group to carry the required info.
                Display.DriverGroup group = null;
                if (displayEntity.Groups.Count > 0)
                {
                    group = displayEntity.Groups[0];
                }
                else
                {
                    group = new Display.DriverGroup();
                }
                group.MinOutlier = displayEntity.LowerLimit;
                group.MaxOutlier = displayEntity.UpperLimit;                

                //Ensure that ObservableCollection operations get handled on UI thread.
                App.Current.Dispatcher.Invoke(() =>
                {
                    displayEntity.Groups.Clear();
                    displayEntity.Groups.Add(group);
                });
            }

            foreach (Display.DriverGroup group in displayEntity.Groups)
            {
                groups.Add(group.ToDto());
            }


            var dto = new DTO.AnalyticDriverMode(
                                            displayEntity.Key,
                                            displayEntity.Name,
                                            displayEntity.Title,
                                            displayEntity.Sort,
                                            displayEntity.IsSelected,
                                            groups);

            return dto;
        }
    }
}
